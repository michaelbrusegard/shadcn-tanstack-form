{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-form",
  "type": "registry:block",
  "title": "Shadcn Tanstack Form Example",
  "description": "A form component example using Tanstack Form with shadcn UI components.",
  "dependencies": [
    "libphonenumber-js",
    "zod"
  ],
  "registryDependencies": [
    "https://michaelbrusegard.github.io/shadcn-tanstack-form/r/form.json"
  ],
  "files": [
    {
      "path": "registry/default/blocks/example-form.tsx",
      "content": "\"use client\";\n\nimport { revalidateLogic } from '@tanstack/react-form';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport { z } from 'zod';\nimport { useAppForm } from '@/components/ui/form';\n\nconst formSchema = z.object({\n  textField: z.string().min(2, 'Text field must be at least 2 characters.'),\n  numberField: z\n    .number(),\n  textAreaField: z.string().min(10, 'Textarea must be at least 10 characters.'),\n  selectField: z.enum(['apple', 'orange', 'peach', 'melon'], { required_error: 'Please select an option.' }),\n  radioGroupField: z.enum(['fiat', 'ferrari', 'astonMartin', 'mercedes'], { required_error: 'Please select a car.' }),\n  checkboxField: z.boolean().refine((val) => val === true, {\n    message: 'You must accept the checkbox.'\n  }),\n  phoneField: z.string().refine(isValidPhoneNumber, 'Invalid phone number'),\n  fieldProps: z.string(),\n});\n\nfunction ExampleForm() {\n  const form = useAppForm({\n    validationLogic: revalidateLogic(),\n    validators: {\n      onDynamic: formSchema,\n    },\n    defaultValues: {\n      textField: '',\n      numberField: NaN,\n      textAreaField: '',\n      selectField: '',\n      radioGroupField: '',\n      checkboxField: false,\n      phoneField: '',\n      fieldProps: '',\n    },\n  });\n\n  return (\n    <form\n      className='relative space-y-8 my-8'\n      onSubmit={async (e) => {\n        e.preventDefault();\n        await form.handleSubmit();\n      }}\n    >\n      <form.AppForm>\n        <form.AppField name='textField'>\n          {(field) => (\n            <field.TextField\n              label='Text field example'\n              placeholder='This is some placeholder text'\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='fieldProps'>\n          {(field) => (\n            <field.TextField\n              label='Field props example'\n              placeholder='This is some placeholder text'\n              description='This is some description text and can be added to most fields with a prop.'\n              fieldSuffix=<span className='text-xs ml-2'>A ReactNode field suffix prop</span>\n              labelSibling=<span className='text-xs ml-2'>A ReactNode label sibling prop</span>\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='numberField'>\n          {(field) => (\n            <field.NumberField\n              label='Number field example'\n              placeholder='12345'\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='textAreaField'>\n          {(field) => (\n            <field.TextAreaField\n              label='Textarea field example'\n              placeholder='here you can write a longer text'\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='selectField'>\n          {(field) => (\n            <field.SelectField\n              label='Select field example'\n              placeholder='Select something'\n              options={[\n                { value: 'apple', label: 'Apple' },\n                { value: 'orange', label: 'Orange' },\n                { value: 'peach', label: 'Peach' },\n                { value: 'melon', label: 'Melon' },\n              ]}\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='radioGroupField'>\n          {(field) => (\n            <field.RadioGroupField\n              label='Radio group field example'\n              options={[\n                { value: 'fiat', label: 'Fiat' },\n                { value: 'ferrari', label: 'Ferrari' },\n                { value: 'astonMartin', label: 'Aston Martin' },\n                { value: 'mercedes', label: 'Mercedes' },\n              ]}\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='checkboxField'>\n          {(field) => (\n            <field.CheckboxField\n              label='Checkbox field example'\n            />\n          )}\n        </form.AppField>\n        <form.AppField name='phoneField'>\n          {(field) => (\n            <field.PhoneField\n              label='Phone field example'\n              placeholder='123 45 678'\n            />\n          )}\n        </form.AppField>\n        <form.SubmitButton\n          className='mb-2 w-full min-w-32 sm:w-auto'\n        >\n          Submit Button\n        </form.SubmitButton>\n      </form.AppForm>\n    </form>\n  );\n}\n\nexport { ExampleForm };\n",
      "type": "registry:block"
    }
  ]
}