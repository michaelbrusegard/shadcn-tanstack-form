{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form",
  "type": "registry:ui",
  "title": "Shadcn Tanstack Form",
  "description": "A primitive form component using Tanstack Form.",
  "dependencies": [
    "@tanstack/react-form",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "input",
    "label",
    "radio-group",
    "select",
    "textarea",
    "https://michaelbrusegard.github.io/shadcn-tanstack-form/r/spinner.json",
    "https://michaelbrusegard.github.io/shadcn-tanstack-form/r/input-phone.json",
    "https://michaelbrusegard.github.io/shadcn-tanstack-form/r/input-password.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/form.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\"\nimport { Slot } from '@radix-ui/react-slot';\nimport { createFormHook, createFormHookContexts } from '@tanstack/react-form';\nimport { XIcon } from 'lucide-react';\nimport { useId, useState, Fragment } from 'react';\nimport { Button, type buttonVariants } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { InputPhone } from '@/components/ui/input-phone';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSeparator,\n  InputOTPSlot,\n} from '@/components/ui/input-otp';\nimport { Spinner } from '@/components/ui/spinner';\nimport { Textarea } from '@/components/ui/textarea';\nimport { InputPassword } from '@/components/ui/input-password';\nimport { type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst { fieldContext, useFieldContext, formContext, useFormContext } =\n  createFormHookContexts();\n\ntype BaseFieldProps = {\n  className?: string;\n  label: string;\n  labelVisible?: boolean;\n  description?: string;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  children: React.ReactNode;\n};\n\nfunction BaseField({\n  className,\n  label,\n  labelVisible = true,\n  labelSibling,\n  fieldSuffix,\n  description,\n  children,\n}: BaseFieldProps) {\n  const field = useFieldContext();\n  const id = useId();\n\n  const labelElement =\n    label && label.length > 0 && labelVisible ? (\n      <Label\n        className={cn(\n          'mb-2 block',\n          field.state.meta.errors.length > 0 && 'text-destructive',\n          !labelVisible && 'sr-only',\n        )}\n        htmlFor={`${id}-form-item`}\n      >\n        {label}\n      </Label>\n    ) : null;\n\n  return (\n    <div className={cn('relative space-y-2', className)}>\n      {labelSibling ? (\n        <div className='flex items-center justify-between'>\n          {labelElement}\n          {labelSibling}\n        </div>\n      ) : (\n        labelElement\n      )}\n      {description && (\n        <p\n          id={`${id}-form-item-description`}\n          className={cn('text-muted-foreground text-sm', className)}\n        >\n          {description}\n        </p>\n      )}\n      {fieldSuffix ? (\n        <div className='flex items-center'>\n          <Slot\n            id={`${id}-form-item`}\n            aria-describedby={\n              !(field.state.meta.errors.length > 0)\n                ? `${id}-form-item-description`\n                : `${id}-form-item-description ${id}-form-item-message`\n            }\n            aria-invalid={!!(field.state.meta.errors.length > 0)}\n          >\n            {children}\n          </Slot>\n          {fieldSuffix}\n        </div>\n      ) : (\n        <Slot\n          id={`${id}-form-item`}\n          aria-describedby={\n            !(field.state.meta.errors.length > 0)\n              ? `${id}-form-item-description`\n              : `${id}-form-item-description ${id}-form-item-message`\n          }\n          aria-invalid={!!(field.state.meta.errors.length > 0)}\n        >\n          {children}\n        </Slot>\n      )}\n      <p\n        id={`${id}-form-item-message`}\n        className={cn(\n          'text-destructive absolute -translate-y-2 text-[0.8rem] font-medium',\n          className,\n        )}\n      >\n        {field.state.meta.errors.length > 0 &&\n          (field.state.meta.errors[0] as { message: string }).message}\n      </p>\n    </div>\n  );\n}\n\ntype TextFieldProps = Omit<\n  React.ComponentProps<typeof Input>,\n  'type' | 'value' | 'onChange' | 'onBlur'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction TextField({\n  className,\n  label,\n  labelVisible,\n  labelSibling,\n  fieldSuffix,\n  description,\n  ...props\n}: TextFieldProps) {\n  const field = useFieldContext<string>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <Input\n        type='text'\n        value={field.state.value}\n        onChange={(e) => field.handleChange(e.target.value)}\n        onBlur={field.handleBlur}\n        {...props}\n      />\n    </BaseField>\n  );\n}\n\ntype NumberFieldProps = Omit<\n  React.ComponentProps<typeof Input>,\n  'type' | 'value' | 'onChange' | 'onBlur'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n  maxDecimals?: number;\n};\n\nfunction NumberField({\n  className,\n  label,\n  labelVisible,\n  labelSibling,\n  fieldSuffix,\n  description,\n  maxDecimals,\n  ...props\n}: NumberFieldProps) {\n  const field = useFieldContext<number>();\n  const [draftValue, setDraftValue] = useState<string | null>(null);\n\n  const formValue = field.state.value;\n  const canonicalValue =\n    formValue === null || formValue === undefined || isNaN(formValue)\n      ? ''\n      : String(formValue);\n\n  const displayValue = draftValue ?? canonicalValue;\n\n  function handleChange(value: string) {\n    let currentDisplayValue = value;\n\n    if (currentDisplayValue === '' || currentDisplayValue === '-') {\n      setDraftValue(currentDisplayValue);\n      field.handleChange(NaN);\n      return;\n    }\n\n    currentDisplayValue = currentDisplayValue.replace(',', '.');\n    if (\n      (currentDisplayValue.match(/\\./g) ?? []).length > 1 ||\n      currentDisplayValue.lastIndexOf('-') > 0 ||\n      /[^0-9.-]/.test(currentDisplayValue)\n    ) {\n      return;\n    }\n\n    if (maxDecimals !== undefined) {\n      const parts = currentDisplayValue.split('.');\n      if (parts[1] && parts[1].length > maxDecimals) {\n        parts[1] = parts[1].substring(0, maxDecimals);\n        currentDisplayValue = parts.join('.');\n      }\n    }\n\n    setDraftValue(currentDisplayValue);\n\n    if (currentDisplayValue.endsWith('.')) {\n      const num = Number.parseFloat(currentDisplayValue.slice(0, -1));\n      field.handleChange(isNaN(num) ? NaN : num);\n    } else {\n      const num = Number.parseFloat(currentDisplayValue);\n      field.handleChange(isNaN(num) ? NaN : num);\n    }\n  }\n\n  function handleBlur() {\n    const num = Number.parseFloat(draftValue ?? '');\n    if (!isNaN(num)) {\n      field.handleChange(num);\n    } else {\n      field.handleChange(NaN);\n    }\n    field.handleBlur();\n    setDraftValue(null);\n  }\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <Input\n        type='text'\n        inputMode='numeric'\n        value={displayValue}\n        onChange={(e) => handleChange(e.target.value)}\n        onBlur={handleBlur}\n        {...props}\n      />\n    </BaseField>\n  );\n}\n\ntype TextAreaFieldProps = Omit<\n  React.ComponentProps<typeof Textarea>,\n  'value' | 'onChange' | 'onBlur'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction TextAreaField({\n  className,\n  label,\n  labelVisible,\n  labelSibling,\n  fieldSuffix,\n  description,\n  ...props\n}: TextAreaFieldProps) {\n  const field = useFieldContext<string>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <Textarea\n        value={field.state.value}\n        onChange={(e) => field.handleChange(e.target.value)}\n        onBlur={field.handleBlur}\n        {...props}\n      />\n    </BaseField>\n  );\n}\n\ntype SelectOption = {\n  label: string;\n  value: string;\n};\n\ntype SelectFieldProps = {\n  label: string;\n  labelVisible?: boolean;\n  className?: string;\n  placeholder?: string;\n  options: SelectOption[];\n  required?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction SelectField({\n  label,\n  labelVisible,\n  className,\n  placeholder = 'Select an option',\n  options,\n  required = true,\n  labelSibling,\n  fieldSuffix,\n  description,\n}: SelectFieldProps) {\n  const field = useFieldContext<string>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <div className='flex gap-2'>\n        <Select\n          value={field.state.value ?? undefined}\n          onValueChange={field.handleChange}\n          required={required}\n        >\n          <SelectTrigger className='w-full'>\n            <SelectValue placeholder={placeholder} />\n          </SelectTrigger>\n          <SelectContent>\n            {options.map((option) => (\n              <SelectItem key={option.value} value={option.value}>\n                {option.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        {!required && field.state.value && (\n          <Button\n            type='button'\n            variant='outline'\n            size='icon'\n            onClick={() => field.handleChange('')}\n          >\n            <XIcon className='h-4 w-4' />\n          </Button>\n        )}\n      </div>\n    </BaseField>\n  );\n}\n\ntype RadioOption = {\n  label: string;\n  value: string;\n};\n\ntype RadioGroupFieldProps = {\n  label: string;\n  labelVisible?: boolean;\n  className?: string;\n  options: RadioOption[];\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction RadioGroupField({\n  label,\n  labelVisible,\n  className,\n  options,\n  labelSibling,\n  fieldSuffix,\n  description,\n}: RadioGroupFieldProps) {\n  const field = useFieldContext<string>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <RadioGroup\n        onValueChange={field.handleChange}\n        defaultValue={field.state.value}\n        className='mt-4 flex flex-col space-y-2'\n      >\n        {options.map((option) => (\n          <div key={option.value} className='flex items-center space-x-3'>\n            <RadioGroupItem value={option.value} id={option.value} />\n            <Label htmlFor={option.value}>{option.label}</Label>\n          </div>\n        ))}\n      </RadioGroup>\n    </BaseField>\n  );\n}\n\ntype CheckboxFieldProps = Omit<\n  React.ComponentProps<typeof Checkbox>,\n  'checked' | 'onCheckedChange' | 'onBlur'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction CheckboxField({\n  className,\n  label,\n  labelVisible,\n  labelSibling,\n  fieldSuffix,\n  description,\n  ...props\n}: CheckboxFieldProps) {\n  const field = useFieldContext<boolean>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <Checkbox\n        checked={field.state.value}\n        onCheckedChange={() => field.handleChange(!field.state.value)}\n        onBlur={field.handleBlur}\n        {...props}\n        className='cursor-pointer'\n      />\n    </BaseField>\n  );\n}\n\ntype PhoneFieldProps = Omit<\n  React.ComponentProps<typeof InputPhone>,\n  'value' | 'onChange' | 'onBlur'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction PhoneField({\n  className,\n  label,\n  labelVisible,\n  fieldSuffix,\n  labelSibling,\n  description,\n  ...props\n}: PhoneFieldProps) {\n  const field = useFieldContext<string>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      fieldSuffix={fieldSuffix}\n      labelSibling={labelSibling}\n      className={className}\n      description={description}\n    >\n      <InputPhone\n        value={field.state.value}\n        onChange={(value) => field.handleChange(value)}\n        onBlur={field.handleBlur}\n        {...props}\n      />\n    </BaseField>\n  );\n}\n\n\ntype OTPFieldProps = Omit<\n  React.ComponentPropsWithoutRef<typeof InputOTP>,\n  'value' | 'onChange' | 'onBlur' | 'maxLength' | 'render'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  slots?: number;\n  groups?: number[];\n  description?: string;\n};\n\nfunction OTPField({\n  className,\n  label,\n  labelVisible,\n  labelSibling,\n  fieldSuffix,\n  slots = 6,\n  groups = [],\n  description,\n  ...props\n}: OTPFieldProps) {\n  const field = useFieldContext<string>();\n\n  const renderSlots = () => {\n    if (groups.length === 0) {\n      return (\n        <InputOTPGroup>\n          {Array.from({ length: slots }).map((_, index) => (\n            <InputOTPSlot key={`slot-${field.name}-${index}`} index={index} />\n          ))}\n        </InputOTPGroup>\n      );\n    }\n\n    return groups.map((groupIndex, groupSize) => (\n      <Fragment key={`group-${field.name}-${groupIndex}`}>\n        {groupIndex > 0 && <InputOTPSeparator />}\n        <InputOTPGroup>\n          {Array.from({ length: groupSize }).map((_, slotIndex) => {\n            const globalIndex =\n              groups.slice(0, groupIndex).reduce((sum, size) => sum + size, 0) +\n              slotIndex;\n            return (\n              <InputOTPSlot\n                key={`slot-${field.name}-${globalIndex}`}\n                index={globalIndex}\n              />\n            );\n          })}\n        </InputOTPGroup>\n      </Fragment>\n    ));\n  };\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <InputOTP\n        value={field.state.value}\n        onChange={(value) => field.handleChange(value)}\n        onBlur={field.handleBlur}\n        maxLength={slots}\n        {...props}\n      >\n        {renderSlots()}\n      </InputOTP>\n    </BaseField>\n  );\n}\n\ntype PasswordFieldProps = Omit<\n  React.ComponentProps<typeof InputPassword>,\n  'value' | 'onChange' | 'onBlur'\n> & {\n  label: string;\n  labelVisible?: boolean;\n  labelSibling?: React.ReactNode;\n  fieldSuffix?: React.ReactNode;\n  description?: string;\n};\n\nfunction PasswordField({\n  className,\n  label,\n  labelVisible,\n  labelSibling,\n  fieldSuffix,\n  description,\n  ...props\n}: PasswordFieldProps) {\n  const field = useFieldContext<string>();\n\n  return (\n    <BaseField\n      label={label}\n      labelVisible={labelVisible}\n      labelSibling={labelSibling}\n      fieldSuffix={fieldSuffix}\n      className={className}\n      description={description}\n    >\n      <InputPassword\n        value={field.state.value}\n        onChange={(e) => field.handleChange(e.target.value)}\n        onBlur={field.handleBlur}\n        {...props}\n      />\n    </BaseField>\n  );\n}\n\ntype SubmitButtonProps = Omit<React.ComponentProps<typeof Button>, 'type'> &\n  VariantProps<typeof buttonVariants> & {\n    loading?: boolean;\n  };\n\nfunction SubmitButton({\n  children,\n  className,\n  loading,\n  ...props\n}: SubmitButtonProps) {\n  const form = useFormContext();\n  return (\n    <form.Subscribe\n      selector={(state) => [\n        state.isSubmitting,\n        state.isPristine,\n        state.isValidating,\n      ]}\n    >\n      {([isSubmitting, isPristine, isValidating]) => (\n        <Button\n          className={cn('min-w-28', className)}\n          type='submit'\n          disabled={isSubmitting ?? isPristine ?? isValidating ?? loading}\n          {...props}\n        >\n          {isSubmitting || isValidating || loading ? (\n            <Spinner size='sm' className='text-primary-foreground' />\n          ) : (\n            children\n          )}\n        </Button>\n      )}\n    </form.Subscribe>\n  );\n}\n\nconst { useAppForm } = createFormHook({\n  fieldComponents: {\n    BaseField,\n    TextField,\n    NumberField,\n    TextAreaField,\n    SelectField,\n    RadioGroupField,\n    CheckboxField,\n    PhoneField,\n    PasswordField,\n    // DateField,\n    OTPField,\n  },\n  formComponents: {\n    SubmitButton,\n  },\n  fieldContext,\n  formContext,\n});\n\nexport { useAppForm };\n",
      "type": "registry:ui"
    }
  ]
}