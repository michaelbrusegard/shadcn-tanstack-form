{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-phone",
  "type": "registry:ui",
  "title": "Input Phone",
  "description": "A phone input component with country code selection.",
  "files": [
    {
      "path": "registry/default/ui/input-phone.tsx",
      "content": "import { CheckIcon, ChevronsUpDown } from 'lucide-react';\nimport { useCallback } from 'react';\nimport * as RPNInput from 'react-phone-number-input';\nimport { parsePhoneNumber } from 'react-phone-number-input';\nimport flags from 'react-phone-number-input/flags';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from '@/components/ui/command';\nimport { Input } from '@/components/ui/input';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nimport { cn } from '@/lib/utils';\n\ntype InputPhoneProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'onChange' | 'value'\n> &\n  Omit<RPNInput.Props<typeof RPNInput.default>, 'onChange' | 'value'> & {\n    onChange?: (value: RPNInput.Value) => void;\n    value?: string;\n  };\n\nfunction InputPhone({ className, onChange, value, ...props }: InputPhoneProps) {\n  const phoneNumber = value ? parsePhoneNumber(value) : undefined;\n  return (\n    <RPNInput.default\n      className={cn('flex', className)}\n      flagComponent={FlagComponent}\n      countrySelectComponent={CountrySelect}\n      inputComponent={InputComponent}\n      value={phoneNumber?.number}\n      country={phoneNumber?.country}\n      onChange={(value) => {\n        if (value !== undefined) {\n          onChange?.(value);\n        }\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction InputComponent({\n  className,\n  ...props\n}: React.ComponentProps<'input'>) {\n  return (\n    <Input\n      className={cn('rounded-s-none rounded-e-md', className)}\n      {...props}\n    />\n  );\n}\n\ntype CountrySelectOption = { label: string; value: RPNInput.Country };\n\ntype CountrySelectProps = {\n  className?: string;\n  disabled?: boolean;\n  value: RPNInput.Country;\n  onChange: (value: RPNInput.Country) => void;\n  options: CountrySelectOption[];\n};\n\nfunction CountrySelect({\n  disabled,\n  value,\n  onChange,\n  options,\n}: CountrySelectProps) {\n  const handleSelect = useCallback(\n    (country: RPNInput.Country) => {\n      onChange(country);\n    },\n    [onChange],\n  );\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type='button'\n          variant='outline'\n          className='flex gap-1 rounded-s-md rounded-e-none px-3'\n          disabled={disabled}\n        >\n          <FlagComponent country={value} countryName={value} />\n          <ChevronsUpDown\n            className={cn(\n              '-mr-2 h-4 w-4 opacity-50',\n              disabled ? 'hidden' : 'opacity-100',\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='w-[300px] p-0'>\n        <Command>\n          <CommandList>\n            <ScrollArea className='h-72'>\n              <CommandInput placeholder='Search country' />\n              <CommandEmpty>No country found</CommandEmpty>\n              <CommandGroup>\n                {options\n                  .filter((x) => x.value)\n                  .map((option) => (\n                    <CommandItem\n                      className='gap-2'\n                      key={option.value}\n                      onSelect={() => handleSelect(option.value)}\n                    >\n                      <FlagComponent\n                        country={option.value}\n                        countryName={option.label}\n                      />\n                      <span className='flex-1 text-sm'>{option.label}</span>\n                      {option.value && (\n                        <span className='text-foreground/50 text-sm'>\n                          {`+${RPNInput.getCountryCallingCode(option.value)}`}\n                        </span>\n                      )}\n                      <CheckIcon\n                        className={cn(\n                          'ml-auto h-4 w-4',\n                          option.value === value ? 'opacity-100' : 'opacity-0',\n                        )}\n                      />\n                    </CommandItem>\n                  ))}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction FlagComponent({ country, countryName }: RPNInput.FlagProps) {\n  const Flag = flags[country];\n\n  return (\n    <span className='bg-foreground/20 flex h-4 w-6 overflow-hidden rounded-xs [&_svg]:size-full!'>\n      {Flag && <Flag title={countryName} />}\n    </span>\n  );\n}\n\nexport { InputPhone };\n",
      "type": "registry:ui"
    }
  ]
}